<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="cpp" xml:space="preserve">
    <value>/*!
 * @file {0}-image.cpp
 *
 * This code is based on the Adafruit code found
 * at https://github.com/adafruit/Adafruit_PixelDust/tree/master/raspberry_pi
 * 
 * Example for Adafruit_PixelDust on Raspberry Pi.
 * Places an image As an obstacle in the middle 
 * of the play-field.
 *
 * REQUIRES rpi-rgb-led-matrix LIBRARY!
 * I2C MUST BE ENABLED using raspi-config!
 *
 */

// ***
// *** Arduino IDE sometimes aggressively builds subfolders
// ***
#ifndef ARDUINO

#include "Adafruit_PixelDust.h"
#include "led-matrix-c.h"
#include "lis3dh.h"
#include &lt;signal.h&gt;

// ***
// *** This file contains the image and obstacle bitmaps.
// ***
#include "{0}-image.h"

struct RGBLedMatrix *matrix = NULL;
Adafruit_LIS3DH      lis3dh;
volatile bool        running = true;

// ***
// *** Background color (r,g,b)
// ***
#define BG_RED    {1}
#define BG_GREEN  {2}
#define BG_BLUE   {3}

// ***
// *** Accelerometer scaling (1-255). The accelerometer X, Y and Z values
// *** passed to the iterate() function will be multiplied by this value 
// *** and then divided by 256, e.g. pass 1 to divide accelerometer input
// *** by 256, 128 to divide by 2.
// ***
#define ACCELEROMETER_SCALING {4}

// ***
// *** Particle elasticity (0-255). This determines the sand
// *** grains' "bounce". Higher numbers yield bouncier particles.
// ***
#define ELASTICITY {5}

// ***
// *** If true, particles are sorted bottom-to-top when iterating. Sorting
// *** sometimes (not always) makes the physics less "Looney Tunes," as lower
// *** particles get out of the way of upper particles. It can be computationally
// *** expensive if there's lots of grains, and isn't good if you're coloring 
// *** grains by index (because they're constantly reordering).
// ***
#define SORT_PARTICLES {6}

// ***
// *** Signal handler allows matrix to be properly deinitialized.
// ***
int sig[] = {{ SIGHUP,SIGINT,SIGQUIT,SIGABRT,SIGKILL,SIGBUS,SIGSEGV,SIGTERM }};
#define N_SIGNALS (int)(sizeof sig / sizeof sig[0])

void irqHandler(int dummy) 
{{
	if(matrix) 
	{{
		led_matrix_delete(matrix);
		matrix = NULL;
	}}
	
	for(int i = 0; i &lt; N_SIGNALS; i++) 
	{{
		signal(sig[i], NULL);
	}}
	
	running = false;
}}

uint8_t normalBlendColor(uint8_t color, uint8_t background, uint8_t alpha)
{{
    float a = (float)(alpha / 255.0);
    float oneMinusAlpha = 1 - a;
    return ((color * a) + (oneMinusAlpha * background));
}}

int main(int argc, char **argv) 
{{
	struct RGBLedMatrixOptions options;
	struct LedCanvas          *canvas;
	int                        width, height, i, xx, yy, zz;
	Adafruit_PixelDust        *sand = NULL;
	dimension_t                x, y;

	for(i = 0; i &lt; N_SIGNALS; i++) 
	{{
		signal(sig[i], irqHandler); // ASAP!
	}}
	
	// ***
	// *** Initialize LED matrix defaults
	// ***
	memset(&amp;options, 0, sizeof(options));
	options.rows = 64;
	options.cols = 64;
	options.chain_length = 1;

	// ***
	// *** Parse command line input. --led-help lists options!
	// ***
	matrix = led_matrix_create_from_options(&amp;options, &amp;argc, &amp;argv);
	
	if(matrix != NULL)
	{{
		// ***
		// *** Create offscreen canvas for double-buffered animation.
		// ***
		canvas = led_matrix_create_offscreen_canvas(matrix);
		led_canvas_get_size(canvas, &amp;width, &amp;height);
		fprintf(stderr, "Size: %dx%d. Hardware gpio mapping: %s\n", width, height, options.hardware_mapping);

		if(lis3dh.begin() == LIS3DH_OK) 
		{{
			// ***
			// *** For this demo, the last argument to the PixelDust constructor
			// *** is set 'false' so the grains are not sorted each frame.
			// *** This is because the grains have specific colors by index
			// *** (sorting would mess that up).
			// ***
			sand = new Adafruit_PixelDust(width, height, NUM_GRAINS, ACCELEROMETER_SCALING, ELASTICITY, SORT_PARTICLES);
			
			if(sand-&gt;begin()) 
			{{
				// ***
				// *** Set up the image bitmap obstacle in the PixelDust play-field
				// *** by centering it on the 64x64 grid.
				// ***
				int x1 = (width  - IMAGE_WIDTH ) / 2;
				int y1 = (height - IMAGE_HEIGHT) / 2;

				for(y = 0; y &lt; IMAGE_HEIGHT; y++) 
				{{
					for(x = 0; x &lt; IMAGE_WIDTH; x++) 
					{{
						uint8_t maskBit = image_mask[y][x];
						
						if (maskBit == 1)
						{{
							sand-&gt;setPixel(x1 + x, y1 + y);
						}}
					}}
				}}

				if (USE_RANDOM_SAND)
				{{
					// ***
					// *** Initialize random snowflake positions
					// ***
					sand-&gt;randomize();
				}}
				else
				{{
					// ***
					// *** Set up initial sand coordinates
					// *** using the array in image.h.
					// ***
					for(i = 0; i &lt; NUM_GRAINS; i++) 
					{{
						uint8_t x = grains[i][0];
						uint8_t y = grains[i][1];
						sand-&gt;setPosition(i, x, y);
					}}
				}}
				
				while(running) 
				{{
					// ***
					// *** Read accelerometer.
					// ***
					lis3dh.accelRead(&amp;xx, &amp;yy, &amp;zz);

					// ***
					// *** Run one frame of the simulation. Axis flip here
					// *** depends how the accelerometer is mounted relative
					// *** to the LED matrix.
					// ***
					sand-&gt;iterate(-xx, -yy, zz);

					// ***
					// *** led_canvas_fill() doesn't appear to work properly
					// *** with the --led-rgb-sequence option...so clear the
					// *** background manually with a bunch of set_pixel() calls.
					// ***
					for(y = 0; y &lt; height; y++) 
					{{
						for(x = 0; x &lt; width; x++) 
						{{
							led_canvas_set_pixel(canvas, x, y, BG_RED, BG_GREEN, BG_BLUE);
						}}
					}}
					
					// ***
					// *** Alpha-blend the image on the background...
					// ***
					for(y = 0; y &lt; IMAGE_HEIGHT; y++) 
					{{
						for(x = 0; x &lt; IMAGE_WIDTH; x++) 
						{{
							uint color = image_color[y][x];
							
							// ***
							// *** Break the color into its components
							// ***
							uint8_t a = (color &gt;&gt; 24);
							uint8_t r = normalBlendColor((color &gt;&gt; 16), BG_RED, a);
							uint8_t g = normalBlendColor((color &gt;&gt; 8), BG_GREEN, a);
							uint8_t b = normalBlendColor((color &gt;&gt; 0), BG_BLUE, a);

							// ***
							// *** Draw the image pixel.
							// ***
							led_canvas_set_pixel(canvas, x1 + x, y1 + y, r, g, b);
						}}
					}}

					// ***
					// *** Draw the sand on the canvas.
					// ***
					if (!USE_RANDOM_SAND)
					{{
						for(i = 0; i &lt; NUM_GRAINS; i++) 
						{{
							// ***
							// *** Get the position of the grain.
							// ***
							sand-&gt;getPosition(i, &amp;x, &amp;y);
							
							// ***
							// *** Get the color of the grain.
							// ***
							uint color = grains[i][2];
							
							// ***
							// *** Break the color into its components
							// ***
							uint8_t r = (color &gt;&gt; 16);
							uint8_t g = (color &gt;&gt; 8);
							uint8_t b = (color &gt;&gt; 0);

							// ***
							// *** Draw the sand pixel.
							// ***
							led_canvas_set_pixel(canvas, x, y, r, b, g);
						}}
					}}
					else
					{{
						for(i = 0; i &lt; NUM_GRAINS; i++) 
						{{
							
							sand-&gt;getPosition(i, &amp;x, &amp;y);
							led_canvas_set_pixel(canvas, x, y, 200, 200, 100);
						}}
					}}

					// ***
					// *** Update matrix contents on next vertical sync
					// *** and provide a new canvas for the next frame.
					// ***
					canvas = led_matrix_swap_on_vsync(matrix, canvas);
				}}
			}}
			else
			{{
				puts("PixelDust init failed");
				return 3;
			}}
		}}
		else
		{{
			puts("LIS3DH init failed");
			return 2;
		}}
	}}
	else
	{{
		puts("Matrix not found!");
		return 1;
	}}

	return 0;
}}
#endif</value>
  </data>
  <data name="instructions" xml:space="preserve">
    <value>1. Copy the files '{0}' and '{1}' to the Raspberry Pi into the folder '/home/pi/Adafruit_PixelDust/raspberry_pi/'.

 2. Log into the Raspberry Pi and change to the code folder using the command 'cd Adafruit_PixelDust/raspberry_pi/'.

 3. Edit the file Makefile using the command 'nano Makefile'.

 4. Copy the contents of the file '{2}' and paste them into makefile above the line 'clean:'.

 5. Find the EXEC= line and add the project name '{3}' to end of the line ensuring there is a space before the project name.

 6. Save the file with the command Ctrl-O and then exit using the command Ctrl-X.

 7. Type 'make' at the command line to build the program.

 8. Edit the buttons.py script to add the new program to the mode button using the command 'nano buttons.py'.

 9. Find the line 'PROGRAMS = ["' and add the text ',"{3}"' (including the comma and double quotes) before the last bracket ']'.
 
10. Optionally, change the 100 in the line '"--led-brightness=100"' to 50 to get the best color matching with the application.

11. Save the file with the command Ctrl-O and then exit using the command Ctrl-X.

11. Start the program by executing the command 'python buttons.py &amp;'.</value>
  </data>
</root>